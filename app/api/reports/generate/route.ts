import { NextRequest, NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs';
import OpenAI from 'openai';
import { executeQuery, QueryResult } from '../../../utils/database';
import { generateDocument } from '../../../utils/documentGenerator';

interface ReportRequest {
  template: {
    id: string;
    name: string;
    content: string;
    type: 'report' | 'reference';
    format: string;
  };
  chatText: string;
  sqlQuery?: string;
  sessionId: string;
  outputFormat?: 'txt' | 'doc' | 'pdf';
}

interface ReportResponse {
  success: boolean;
  fileUrl?: string;
  format?: string;
  error?: string;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const body: ReportRequest = await request.json();
    const { template, chatText, sqlQuery, sessionId, outputFormat = 'txt' } = body;

    console.log('Generating report with template:', template.name);
    console.log('Chat text length:', chatText.length);
    console.log('SQL query:', sqlQuery);
    console.log('Output format:', outputFormat);

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    let databaseData: any[] = [];
    let databaseColumns: string[] = [];
    let databaseRowCount = 0;
    
    if (sqlQuery) {
      console.log('Executing SQL query to database...');
      const queryResult: QueryResult = await executeQuery(sqlQuery);
      
      if (queryResult.success && queryResult.data) {
        databaseData = queryResult.data;
        databaseColumns = queryResult.columns || [];
        databaseRowCount = queryResult.rowCount || 0;
        console.log('Database query successful, rows:', databaseRowCount);
      } else {
        console.error('Database query failed:', queryResult.error);
        return NextResponse.json({
          success: false,
          error: `Database query failed: ${queryResult.error}`
        } as ReportResponse, { status: 500 });
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Å –ø–æ–º–æ—â—å—é OpenAI, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    const generatedReport = await generateReportWithAI(template, chatText, sqlQuery, databaseData, databaseColumns);

    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const reportsDir = path.join(process.cwd(), 'public', 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileName = `report_${template.id}_${timestamp}`;
    const fileExtension = outputFormat === 'doc' ? 'docx' : outputFormat;
    const filePath = path.join(reportsDir, `${fileName}.${fileExtension}`);
    const fileUrl = `/reports/${fileName}.${fileExtension}`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    await generateDocument(
      generatedReport,
      template.name,
      outputFormat,
      filePath
    );

    console.log('Report generated successfully:', fileUrl);

    return NextResponse.json({
      success: true,
      fileUrl,
      format: outputFormat
    } as ReportResponse);

  } catch (error) {
    console.error('Error generating report:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to generate report'
    } as ReportResponse, { status: 500 });
  }
}

async function generateReportWithAI(
  template: any, 
  chatText: string, 
  sqlQuery?: string, 
  databaseData: any[] = [], 
  databaseColumns: string[] = []
): Promise<string> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    let databaseInfo = '';
    if (databaseData.length > 0) {
      databaseInfo = `
–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${databaseData.length}
–ö–æ–ª–æ–Ω–∫–∏: ${databaseColumns.join(', ')}

–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:
${JSON.stringify(databaseData.slice(0, 10), null, 2)}
`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –®–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞:
    ${template.content}

    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
    1. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    2. –ó–∞–º–µ–Ω–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ {{ }} –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —É–∫–∞–∂–∏ —ç—Ç–æ
    4. –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    5. –î–æ–±–∞–≤—å –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    6. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    7. –°–¥–µ–ª–∞–π –æ—Ç—á—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
    8. –ï—Å–ª–∏ –µ—Å—Ç—å SQL –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –≤–∫–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    9. –î–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥—ã –≤ –∫–æ–Ω—Ü–µ –æ—Ç—á—ë—Ç–∞
    10. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    11. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏ –¥–µ–ª–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
    12. –ò—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# ## ###)

    –í–∞–∂–Ω–æ: –û—Ç—á—ë—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.`;

    const userPrompt = `–î–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞:
${chatText}

${sqlQuery ? `SQL –∑–∞–ø—Ä–æ—Å: ${sqlQuery}` : ''}

${databaseInfo}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ "${template.name}" –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. 
–û—Ç—á—ë—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`;

    console.log('Sending request to OpenAI...');
    console.log('Template type:', template.type);
    console.log('Chat text length:', chatText.length);
    console.log('Database rows:', databaseData.length);

    const completion = await openai.chat.completions.create({
      model: "gpt-4.1-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 3000,
      presence_penalty: 0.1,
      frequency_penalty: 0.1,
    });

    const generatedReport = completion.choices[0]?.message?.content || '';

    if (!generatedReport) {
      throw new Error('OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á—ë—Ç–∞');
    }

    console.log('OpenAI response received, length:', generatedReport.length);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    return generatedReport;

  } catch (error) {
    console.error('Error calling OpenAI:', error);
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const now = new Date();
    const reportDate = now.toLocaleDateString('ru-RU');
    
    let report = template.content;
    
    // –ó–∞–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    report = report.replace(/\{\{ –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è \}\}/g, reportDate);
    report = report.replace(/\{\{ –ø–µ—Ä–∏–æ–¥_–∞–Ω–∞–ª–∏–∑–∞ \}\}/g, `${now.getMonth() + 1}/${now.getFullYear()}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞
    report += `\n\nüìã –î–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞:\n${chatText}`;
    
    if (sqlQuery) {
      report += `\n\nüîç SQL –∑–∞–ø—Ä–æ—Å:\n${sqlQuery}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    if (databaseData.length > 0) {
      report += `\n\nüìä –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã (${databaseData.length} —Å—Ç—Ä–æ–∫):\n`;
      report += `–ö–æ–ª–æ–Ω–∫–∏: ${databaseColumns.join(', ')}\n\n`;
      report += JSON.stringify(databaseData.slice(0, 5), null, 2);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    report += `\n\nüìä –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ "${template.name}"`;
    report += `\n‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${now.toLocaleString('ru-RU')}`;
    report += `\n‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º`;
    report += `\nüí° –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á`;
    
    return report;
  }
} 