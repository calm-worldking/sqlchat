import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export async function POST(request: NextRequest) {
  try {
    console.log('API called with request:', request.url);
    const body = await request.json();
    console.log('Request body:', body);
    const { template, data, format } = body;

    if (!template || !data) {
      console.log('Missing template or data');
      return NextResponse.json(
        { error: 'Missing template or data' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const outputDir = path.join(process.cwd(), 'public', 'generated');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const fileName = `report_${timestamp}`;
    let filePath = '';
    let fileUrl = '';

    if (format === 'pdf') {
      filePath = path.join(outputDir, `${fileName}.pdf`);
      fileUrl = `/generated/${fileName}.pdf`;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const content = `–û—Ç—á—ë—Ç\n\n${data.response}\n\nSQL: ${data.sql_query || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
      fs.writeFileSync(filePath.replace('.pdf', '.txt'), content);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
      console.log('PDF generation would happen here');
      
    } else if (format === 'doc') {
      filePath = path.join(outputDir, `${fileName}.docx`);
      fileUrl = `/generated/${fileName}.docx`;
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOC
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const content = `–û—Ç—á—ë—Ç\n\n${data.response}\n\nSQL: ${data.sql_query || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
      fs.writeFileSync(filePath.replace('.docx', '.txt'), content);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è DOC
      console.log('DOC generation would happen here');
      
    } else {
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
      filePath = path.join(outputDir, `${fileName}.txt`);
      fileUrl = `/generated/${fileName}.txt`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      let content = '';
      if (template.content) {
        content = template.content;
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        content = content.replace(/\{\{ –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è \}\}/g, new Date().toLocaleDateString('ru-RU'));
        content = content.replace(/\{\{ –ø–µ—Ä–∏–æ–¥_–∞–Ω–∞–ª–∏–∑–∞ \}\}/g, `${new Date().getMonth() + 1}/${new Date().getFullYear()}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç n8n –≤ –∫–æ–Ω–µ—Ü
        content += `\n\nüìã –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:\n${data.response}`;
        if (data.sql_query) {
          content += `\n\nüîç SQL –∑–∞–ø—Ä–æ—Å:\n${data.sql_query}`;
        }
      } else {
        content = `–û—Ç—á—ë—Ç\n\n${data.response}\n\nSQL: ${data.sql_query || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
      }
      
      fs.writeFileSync(filePath, content);
    }

    const response = {
      success: true,
      fileUrl: fileUrl,
      format: format || 'text'
    };
    console.log('API response:', response);
    return NextResponse.json(response);

  } catch (error) {
    console.error('Error generating document:', error);
    return NextResponse.json(
      { error: 'Failed to generate document' },
      { status: 500 }
    );
  }
} 