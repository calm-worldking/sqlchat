{
  "name": "SQL Chat Example Workflow",
  "nodes": [
    {
      "parameters": {
        "path": "webhook-test/chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a4c8a9e3-c9c7-4c0e-a7a4-e6b2c8c8b8c8",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "mode": "jsonToString",
        "property": "data",
        "inputFormat": "auto-detect"
      },
      "id": "b5d9b0f4-d0d8-5d1f-b8b5-f7c3d9d9c9d9",
      "name": "Process Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        470,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Получаем входящее сообщение\nconst message = $input.item.json.message;\nconst sessionId = $input.item.json.sessionId || 'default';\n\n// Обработка сообщения\nlet response = {\n  text: `Вы отправили: ${message}`,\n  response_type: 'text'\n};\n\n// Проверяем на запрос визуализации\nif (message.toLowerCase().includes('график') || \n    message.toLowerCase().includes('визуализация') || \n    message.toLowerCase().includes('диаграмма')) {\n  \n  // Пример R скрипта для создания графика\n  const rScript = `\n# Создаем пример данных\ndata <- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\"),\n  value = c(10, 25, 15, 30)\n)\n\n# Создаем столбчатую диаграмму\np <- ggplot(data, aes(x = category, y = value, fill = category)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Пример визуализации данных\", \n       x = \"Категория\", \n       y = \"Значение\")\n`;\n\n  response = {\n    text: \"Вот пример визуализации данных:\",\n    response_type: 'r_script',\n    r_script: rScript\n  };\n}\n\n// Проверяем на запрос SQL\nif (message.toLowerCase().includes('sql') || \n    message.toLowerCase().includes('запрос') || \n    message.toLowerCase().includes('таблица')) {\n  \n  // Пример R скрипта для создания таблицы\n  const rScript = `\n# Создаем пример данных для таблицы\ndf <- data.frame(\n  id = 1:5,\n  name = c(\"Иван\", \"Мария\", \"Алексей\", \"Елена\", \"Петр\"),\n  age = c(25, 32, 41, 29, 37),\n  salary = c(50000, 65000, 78000, 59000, 82000)\n)\n\n# Создаем красивую таблицу с помощью gt\ngt_table <- gt::gt(df) %>%\n  gt::tab_header(\n    title = \"Результаты SQL-запроса\",\n    subtitle = \"Пример данных сотрудников\"\n  ) %>%\n  gt::fmt_currency(\n    columns = vars(salary),\n    currency = \"RUB\",\n    decimals = 0\n  ) %>%\n  gt::tab_style(\n    style = list(gt::cell_fill(color = \"#f0f9ff\")),\n    locations = list(gt::cells_column_labels())\n  )\n`;\n\n  response = {\n    text: \"Результаты вашего SQL-запроса:\",\n    response_type: 'r_script',\n    r_script: rScript\n  };\n}\n\nreturn {json: {output: {\n  Full_response_report: response.text,\n  response_type: response.response_type,\n  r_script: response.r_script\n}}};"
      },
      "id": "c6e0c1f5-e1e9-6e2g-c9c6-g8d4e0e0d0e0",
      "name": "Process Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        690,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$node[\"Process Message\"].json}}",
        "options": {}
      },
      "id": "d7f1d2g6-f2f0-7f3h-d0d7-h9e5f1f1e1f1",
      "name": "Respond To Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        910,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Input": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Respond To Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p",
  "id": "1",
  "meta": {
    "instanceId": "example-instance"
  },
  "tags": [
    {
      "id": 1,
      "name": "example",
      "createdAt": "2023-01-01T00:00:00.000Z",
      "updatedAt": "2023-01-01T00:00:00.000Z"
    }
  ]
} 