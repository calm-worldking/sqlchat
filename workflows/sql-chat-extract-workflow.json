{
    "nodes": [
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "764176d6-3c89-404d-9c71-301e8a406a68",
                "name": "table",
                "type": "string",
                "value": "={{ $('List all tables in a database').item.json.table_name ?? 'emails_metadata'}}"
              }
            ]
          },
          "includeOtherFields": true,
          "options": {}
        },
        "id": "70b096a1-524f-409b-83e6-28fa63ee4c4c",
        "name": "Add table name to output",
        "type": "n8n-nodes-base.set",
        "position": [
          -1480,
          -380
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "operation": "toJson",
          "options": {}
        },
        "id": "c05c1400-3f33-49d8-9edf-4f5947de3095",
        "name": "Convert data to binary",
        "type": "n8n-nodes-base.convertToFile",
        "position": [
          -1280,
          -380
        ],
        "typeVersion": 1.1
      },
      {
        "parameters": {
          "operation": "write",
          "fileName": "=e:/work/pgsql-{{ $workflow.id }}.json",
          "options": {}
        },
        "id": "d85b4147-dc45-4018-90c0-d67151614056",
        "name": "Save file locally",
        "type": "n8n-nodes-base.readWriteFile",
        "position": [
          -1100,
          -380
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "operation": "fromJson",
          "options": {}
        },
        "id": "20dac55d-e299-48d1-8801-fcb7a605a446",
        "name": "Extract data from file",
        "type": "n8n-nodes-base.extractFromFile",
        "position": [
          -1400,
          80
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "public": true,
          "options": {}
        },
        "id": "89458f03-491a-4f34-8a6f-392b9f2a8da8",
        "name": "Chat Trigger",
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "position": [
          -2060,
          -20
        ],
        "webhookId": "c308dec7-655c-4b79-832e-991bd8ea891f",
        "typeVersion": 1.1,
        "notesInFlow": false
      },
      {
        "parameters": {},
        "id": "7a5cf47a-0d69-4ba3-9087-66754b6cb7c1",
        "name": "When clicking \"Test workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "position": [
          -2060,
          -380
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "42abd24e-419a-47d6-bc8b-7146dd0b8314",
                "name": "sessionId",
                "type": "string",
                "value": "={{ $('Chat Trigger').isExecuted ? $('Chat Trigger').first().json.sessionId : $('WorkflowTrigger').first().json.sessionId}}"
              },
              {
                "id": "39244192-a1a6-42fe-bc75-a6fba1f264df",
                "name": "action",
                "type": "string",
                "value": "={{ $('Chat Trigger').isExecuted && $('Chat Trigger').first().json.action }}"
              },
              {
                "id": "f78c57d9-df13-43c7-89a7-5387e528107e",
                "name": "chatinput",
                "type": "string",
                "value": "={{ $('WorkflowTrigger').isExecuted ? $('WorkflowTrigger').first().json.natural_language_query: $('Chat Trigger').first().json.chatInput }}"
              },
              {
                "id": "e42b39eb-dfbd-48d9-94ed-d658bdd41454",
                "name": "schema",
                "type": "string",
                "value": "={{ $json.data }}"
              },
              {
                "id": "6f1deb5d-15d0-40d6-80be-01df44d6f71a",
                "name": "contextLength",
                "value": "={{ $('WorkflowTrigger').isExecuted ? $('WorkflowTrigger').first().json.contextLength: 20 }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "id": "4df5727f-605b-4670-bfbb-9c50e3c0bcb2",
        "name": "Combine schema data and chat input",
        "type": "n8n-nodes-base.set",
        "position": [
          -1180,
          80
        ],
        "executeOnce": true,
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "fileSelector": "=e:/work/pgsql-{{ $workflow.id }}.json",
          "options": {}
        },
        "id": "61a37c19-7cb8-49d2-8ad7-7ce8586d084a",
        "name": "Load the schema from the local file",
        "type": "n8n-nodes-base.readWriteFile",
        "maxTries": 2,
        "position": [
          -1840,
          80
        ],
        "retryOnFail": false,
        "typeVersion": 1,
        "alwaysOutputData": true,
        "onError": "continueRegularOutput"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "ebbe194a-4b8b-44c9-ac19-03cf69d353bf",
                "name": "query",
                "type": "string",
                "value": "={{ $json.output.trim() }}"
              }
            ]
          },
          "options": {}
        },
        "id": "2327106a-5d96-48d2-ad67-23ef0daa29b1",
        "name": "Extract SQL query",
        "type": "n8n-nodes-base.set",
        "position": [
          -580,
          80
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "2963d04d-9d79-49f9-b52a-dc8732aca781",
                "operator": {
                  "type": "string",
                  "operation": "notEmpty",
                  "singleValue": true
                },
                "leftValue": "={{ $json.query }}",
                "rightValue": ""
              }
            ]
          },
          "options": {}
        },
        "id": "2c707a3f-8d87-49f9-b01b-f00019031191",
        "name": "Check if query exists",
        "type": "n8n-nodes-base.if",
        "position": [
          100,
          80
        ],
        "typeVersion": 2.2
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "f944d21f-6aac-4842-8926-4108d6cad4bf",
                "name": "sqloutput",
                "type": "string",
                "value": "={{ Object.keys($jmespath($input.all(),'[].json')[0]).join(' | ') }} \n{{ ($jmespath($input.all(),'[].json')).map(obj => Object.values(obj).join(' | ')).join('\\n') }}"
              }
            ]
          },
          "options": {}
        },
        "id": "20e1ea9f-306f-4fa9-ac6d-bc936595da2e",
        "name": "Format query results",
        "type": "n8n-nodes-base.set",
        "position": [
          540,
          -80
        ],
        "executeOnce": true,
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "mode": "combine",
          "combineBy": "combineByPosition",
          "options": {
            "includeUnpaired": true
          }
        },
        "id": "4a30cc7c-fb65-4886-9cea-8fccc12fc8e9",
        "name": "Combine query result and chat answer",
        "type": "n8n-nodes-base.merge",
        "position": [
          760,
          0
        ],
        "typeVersion": 3
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT \n  c.column_name, \n  COALESCE(pgd.description, '') AS description,  -- если хочешь пустую строку вместо NULL\n  c.udt_name AS data_type, \n  CASE \n    WHEN c.data_type = 'ARRAY' THEN TRUE \n    ELSE FALSE \n  END AS is_array,\n  c.is_nullable\nFROM \n  information_schema.columns c\nLEFT JOIN \n  pg_catalog.pg_statio_all_tables st \n    ON c.table_schema = st.schemaname AND c.table_name = st.relname\nLEFT JOIN \n  pg_catalog.pg_description pgd \n    ON pgd.objoid = st.relid AND pgd.objsubid = c.ordinal_position\nWHERE \n  c.table_name = '{{ $json.table_name }}';\n",
          "options": {}
        },
        "id": "1d48075b-4c4b-4d50-8f70-51f3fe9c9c65",
        "name": "List all columns in a table",
        "type": "n8n-nodes-base.postgres",
        "position": [
          -1680,
          -380
        ],
        "typeVersion": 2.6,
        "credentials": {
          "postgres": {
            "id": "TJiZum09C5sY5FO2",
            "name": "Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='public' and table_name not ilike '%n8n%';",
          "options": {}
        },
        "id": "ebbb76fb-ee38-4677-8800-26bd3e779100",
        "name": "List all tables in a database",
        "type": "n8n-nodes-base.postgres",
        "position": [
          -1860,
          -380
        ],
        "typeVersion": 2.6,
        "credentials": {
          "postgres": {
            "id": "TJiZum09C5sY5FO2",
            "name": "Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "{{ $json.query }}",
          "options": {}
        },
        "id": "d01e347e-8199-4bdf-bb83-65f6f2e4c5e2",
        "name": "Postgres",
        "type": "n8n-nodes-base.postgres",
        "position": [
          320,
          -80
        ],
        "typeVersion": 2.6,
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "TJiZum09C5sY5FO2",
            "name": "Postgres account"
          }
        },
        "onError": "continueRegularOutput"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "15622b82-a226-4f54-9c0e-3f30b2c0cf4b",
                "name": "query",
                "type": "string",
                "value": "={{ $json.query }};"
              }
            ]
          },
          "options": {}
        },
        "id": "075ed552-d222-42b2-b2ac-c9f87ac1aee4",
        "name": "Add trailing semicolon",
        "type": "n8n-nodes-base.set",
        "position": [
          -140,
          0
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "94bd2686-21e7-44aa-b6a8-be5a17bd0242",
                "operator": {
                  "type": "string",
                  "operation": "notEmpty",
                  "singleValue": true
                },
                "leftValue": "={{ $json.query }}",
                "rightValue": ""
              },
              {
                "id": "f22c8914-62f3-4f15-be6f-dd23de5a099a",
                "operator": {
                  "type": "string",
                  "operation": "notEndsWith"
                },
                "leftValue": "={{ $json.query }}",
                "rightValue": ";"
              }
            ]
          },
          "options": {}
        },
        "id": "5794d400-69db-45d9-81ff-c606ae73f683",
        "name": "Check for trailing semicolon",
        "type": "n8n-nodes-base.if",
        "position": [
          -360,
          80
        ],
        "typeVersion": 2.2
      },
      {
        "parameters": {
          "workflowInputs": {
            "values": [
              {
                "name": "natural_language_query"
              },
              {
                "name": "sessionId"
              },
              {
                "name": "contextLength",
                "type": "number"
              }
            ]
          }
        },
        "id": "ef930a01-3dd6-4404-b044-f32c26e6af2b",
        "name": "WorkflowTrigger",
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "position": [
          -2060,
          180
        ],
        "typeVersion": 1.1
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "or",
            "conditions": [
              {
                "id": "c761a475-43ac-483b-827c-0eb69dfebc9a",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $('When clicking \"Test workflow\"').isExecuted }}",
                "rightValue": ""
              }
            ]
          },
          "options": {}
        },
        "id": "ca485e1a-abb5-4140-89ff-174beef50a50",
        "name": "If ran manually",
        "type": "n8n-nodes-base.if",
        "position": [
          -900,
          -380
        ],
        "typeVersion": 2.2
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "or",
            "conditions": [
              {
                "id": "28000886-13f4-4628-b1c0-afaaf596ec56",
                "operator": {
                  "type": "object",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $input.item.binary }}",
                "rightValue": ""
              },
              {
                "id": "ddcd8702-8774-4075-a2d0-6d99cf0cb2c2",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $('If ran manually').isExecuted }}",
                "rightValue": ""
              }
            ]
          },
          "options": {}
        },
        "id": "fe7b0008-2158-4a15-a711-1e7c96fc5662",
        "name": "If file exists or already retried generating it",
        "type": "n8n-nodes-base.if",
        "position": [
          -1620,
          80
        ],
        "typeVersion": 2.2
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "aa55e186-1535-4923-aee4-e088ca69575b",
                "name": "query",
                "type": "string",
                "value": "={{ $json.query ?? '' }}"
              }
            ]
          },
          "options": {}
        },
        "id": "728ef12a-182d-4ae7-a1d1-1d039b383b03",
        "name": "Format empty output",
        "type": "n8n-nodes-base.set",
        "position": [
          320,
          220
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Ты имеешь доступ к базе данных PostgreSQL. Ниже — актуальная схема:\n\n📅 Сегодняшняя дата:\n{{ $now.toLocaleString() }}\n\n📊 Схема БД:\n{{ $json.schema }}\n\n🔎 Пользовательский вопрос:\n{{ $json.chatinput }}\n\nСформируй SQL-запрос, который максимально полно и корректно отвечает на этот вопрос, строго следуя схеме.\n",
          "options": {
            "systemMessage": "=Ты — эксперт по генерации SQL-запросов, специализирующийся на PostgreSQL.\n\n📌 Твоя задача:\nСформировать корректный SQL-запрос на основе вопроса пользователя, строго соблюдая схему базы данных.\n\n---\n\n📅 Сегодняшняя дата:\n{{ $now.toLocaleString() }}\n\n📊 Схема базы данных:\n{{ $json.schema }}\n\n🧠 Пользовательский запрос:\n{{ $json.chatinput }}\n\n---\n\n🛑 Жёсткие правила:\n\n1. ❗ Используй **только** те таблицы и поля, которые явно присутствуют в схеме.\n2. ❗ Никогда не придумывай поля, таблицы, типы или структуры (например: `priority`, `status`, `metadata`, `json_data` и т.п.).\n3. ❗ Не используй JSON-операторы (`->`, `->>`, `@>`) без явного указания в схеме, что поле имеет тип `json` или `jsonb`.\n4. ❗ В `UNION` и `UNION ALL` все SELECT-запросы должны возвращать **одинаковое количество колонок** и совместимые типы. Используй `NULL AS`, `::TEXT` или `CAST()` при необходимости.\n5. ❗ Не возвращай id-поля в SELECT, если в таблице есть более понятные поля (например `name`, `title`, `email`, `description`).\n6. ❗ Не используй `*` в SELECT, если можно явно указать поля.\n7. ❗ Все SQL-запросы должны заканчиваться точкой с запятой `;`.\n8. ❗ Никогда не добавляй пояснений, комментариев, markdown или форматирования — только **чистый SQL**.\n9. ✅ Для текстовых поисков используй `ILIKE '%...'`.\n10. ✅ Для булевых полей — `IS TRUE`, `IS FALSE`.\n11. ✅ Для дат — `>`, `<`, `BETWEEN`, `CURRENT_DATE - INTERVAL`.\n12. ✅ Используй `ORDER BY ... DESC`, если пользователь спрашивает о последних, новых, свежих данных.\n13. ✅ Используй `LIMIT` только если в запросе есть \"топ\", \"первый\", \"несколько\", \"1\", \"N\" и т.п.\n\n---\n\n📎 Пример корректного UNION:\n\n```sql\n(SELECT name, created_at::TEXT AS info FROM users ORDER BY created_at DESC LIMIT 1)\nUNION ALL\n(SELECT name, opened_at::TEXT FROM gyms ORDER BY opened_at DESC LIMIT 1);\n"
          }
        },
        "id": "96b3d615-8a63-470e-8a7d-96e1615d434b",
        "name": "AI Agent1",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "position": [
          -960,
          80
        ],
        "typeVersion": 1.8
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "mode": "list",
            "value": "gpt-4.1-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          -960,
          340
        ],
        "id": "0ab20916-d892-4e29-b644-892c5a379b01",
        "name": "OpenAI Chat Model1",
        "credentials": {
          "openAiApi": {
            "id": "ObyB9R5Nq3BsLRBQ",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "tableName": "n8n_chat_history",
          "contextWindowLength": "={{ $json.contextLength }}"
        },
        "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
        "typeVersion": 1.3,
        "position": [
          -840,
          340
        ],
        "id": "a056603d-0f1a-4b54-b5a3-8454ad5761d1",
        "name": "Postgres Chat Memory1",
        "notesInFlow": false,
        "credentials": {
          "postgres": {
            "id": "TJiZum09C5sY5FO2",
            "name": "Postgres account"
          }
        }
      }
    ],
    "connections": {
      "Add table name to output": {
        "main": [
          [
            {
              "node": "Convert data to binary",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert data to binary": {
        "main": [
          [
            {
              "node": "Save file locally",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save file locally": {
        "main": [
          [
            {
              "node": "If ran manually",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract data from file": {
        "main": [
          [
            {
              "node": "Combine schema data and chat input",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Chat Trigger": {
        "main": [
          [
            {
              "node": "Load the schema from the local file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Test workflow\"": {
        "main": [
          [
            {
              "node": "List all tables in a database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine schema data and chat input": {
        "main": [
          [
            {
              "node": "AI Agent1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Load the schema from the local file": {
        "main": [
          [
            {
              "node": "If file exists or already retried generating it",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract SQL query": {
        "main": [
          [
            {
              "node": "Check for trailing semicolon",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check if query exists": {
        "main": [
          [
            {
              "node": "Combine query result and chat answer",
              "type": "main",
              "index": 1
            },
            {
              "node": "Postgres",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Format empty output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format query results": {
        "main": [
          [
            {
              "node": "Combine query result and chat answer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine query result and chat answer": {
        "main": [
          []
        ]
      },
      "List all columns in a table": {
        "main": [
          [
            {
              "node": "Add table name to output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "List all tables in a database": {
        "main": [
          [
            {
              "node": "List all columns in a table",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres": {
        "main": [
          [
            {
              "node": "Format query results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add trailing semicolon": {
        "main": [
          [
            {
              "node": "Check if query exists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check for trailing semicolon": {
        "main": [
          [
            {
              "node": "Add trailing semicolon",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Check if query exists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "WorkflowTrigger": {
        "main": [
          [
            {
              "node": "Load the schema from the local file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If ran manually": {
        "main": [
          [],
          [
            {
              "node": "Load the schema from the local file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If file exists or already retried generating it": {
        "main": [
          [
            {
              "node": "Extract data from file",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "List all tables in a database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "Extract SQL query",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Postgres Chat Memory1": {
        "ai_memory": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "229fcadd5d04276eaa7a3f397f6571c4439bac96b912fb0774d4e4f872a9b68c"
    }
  }